// supabase/functions/_shared/prompts.ts

// --- JSON 輸出 Prompt (方案三：強化數值格式，result_status_next 可為陣列) ---
export function getAnalysisPrompt(
  _categoryCode: number | null | undefined,
  content: string,
  truncated: boolean = false
): string {
  const truncatedMessage = truncated
    ? "\n\n[注意：由於原始文本過長，輸入內容已被截斷]"
    : "";

  // --- JSON 輸出 Prompt (已修改移除範例參照並釐清要求) ---
  const prompt = `
你是一位客觀中立的國會記錄分析師，任務是為一般公民提供清晰、詳盡且結構化的立法院會議記錄摘要。請閱讀以下文本，並**嚴格以一個符合指定結構的 JSON 物件格式**輸出分析結果。

**一、 JSON 輸出結構要求:**

請**務必**輸出一個 JSON 物件，其結構必須**完全符合**以下定義，不多也不少：
\`\`\`json
{
"summary_title": "string",
"overall_summary_sentence": "string",
"agenda_items": [
  {
    "item_title": "string",
    // core_issue 為字串或字串陣列
    "core_issue": "string | string[]", // 核心議題摘要 (純文字 或 純文字陣列)
    "key_speakers": [
      {
        "speaker_name": "string",
        // speaker_viewpoint 為字串或字串陣列
        "speaker_viewpoint": "string | string[]" // 觀點/訴求 (純文字 或 純文字陣列)
      }
    ] | null,
    // controversy 為字串、字串陣列或 null
    "controversy": "string | string[] | null", // 爭議點 (純文字 或 純文字陣列 或 null)
    // result_status_next 為字串或字串陣列
    "result_status_next": "string | string[]" // 結果/狀態 (純文字 或 純文字陣列)
  }
]
}
\`\`\`

**二、 JSON 欄位內容要求與細節:**

*   **強制性數值格式規則**: 為了公民易讀性與資料一致性，所有在摘要中提及的數值，**必須且只能使用阿拉伯數字**。**嚴禁使用**中文數字（如：一、二、三、十、百、千、萬、分之）。
    *   **範例**:
        *   法條條號："第 35 條" (不是 "第三十五條")
        *   議程編號："討論事項第 11 案" (不是 "討論事項第十一案")
        *   年份："113 年" (不是 "一百十三年")
        *   百分比："45%" (不是 "百分之四十五")
        *   分數："2/3" (不是 "三分之二")
        *   數量/基數："15 個基數" (不是 "十五個基數")
        *   金額："50 億 4,750 萬元" (可包含單位，但數字部分用阿拉伯數字)
*   **"summary_title" (字串)**: 為整個會議記錄提供一個**簡潔且概括性**的標題。
*   **"overall_summary_sentence" (字串)**: **必須**提供一個摘要開頭的總結句，簡要列出本次記錄涵蓋的主要議程或討論主題。**此句應盡可能詳盡地提及主要討論的法案全名或關鍵議題，使其能獨立概括會議主要內容，具備足夠的資訊含量。**
*   **"agenda_items" (陣列)**: 包含記錄中按順序出現的**所有**主要議程項目或法案。每個項目都是一個物件。
  *   **"item_title" (字串)**: 該議程項目的**核心法案名稱與議程編號**。**請務必省略提案委員的姓名列表，僅保留法案的關鍵名稱，並在結尾處參考原始文本加入如 '(三讀)' 或 '(討論事項第 X 案)' 等輔助資訊，使標題簡潔且具備描述性與上下文脈絡。**
  *   **"core_issue" (字串 或 字串陣列)**: **精確且具體地摘要**此議題/法案核心目標與內容。**應適度包含提案的背景、動機或要解決的問題，使其內容充實且易於理解。**
      *   **如果議題只涉及單一核心目標或內容，則此欄位為一個包含該摘要的字串 (純文字)。**
      *   **如果議題涵蓋多個獨立、清晰可分的子議題或修正要點（例如一次處理多個不同面向的條文修正），則此欄位必須是一個字串陣列，每個字串代表一個獨立的子議題或要點摘要 (純文字陣列)。** **陣列中的字串不應包含 Markdown 列表符號。**
  *   **"key_speakers" (物件陣列 或 null)**: 包含本次討論中**最具代表性或影響力的幾位發言者**。若無關鍵發言可摘要，則此欄位值必須設為 "null"。
      *   **"speaker_name" (字串)**: 發言者的**姓名及職稱/單位**。
      *   **"speaker_viewpoint" (字串 或 字串陣列)**: 該發言者最核心的觀點、訴求、理由或政策回應摘要。**摘要應具體、詳盡，捕捉發言的關鍵論證點。**
          *   **如果發言者只有單一核心觀點，則此欄位為一個包含該觀點的字串 (純文字)。**
          *   **如果發言者提出多個獨立的理由、訴求或要點，則此欄位必須是一個字串陣列，每個字串代表一個獨立的點 (純文字陣列)。** **建議在陣列的每個字串開頭加入如 '理由：'、'主要訴求：'、'反對修正：' 等結構性標示文字（這些標示文字需包含在字串值內），以增強結構清晰度。陣列中的字串不應包含 Markdown 列表符號。**
  *   **"controversy" (字串 或 字串陣列 或 null)**: 主要爭議/攻防摘要。**摘要應點明爭議的核心議題，並清晰呈現不同方的主要論點或立場，提供足夠的細節以理解爭議全貌。**
      *   **如果只有單一爭議點或總結性描述，則此欄位為一個包含該描述的字串 (純文字)。**
      *   **如果存在多個明確的爭議點或不同立場的論點，則此欄位必須是一個字串陣列，每個字串代表一個獨立的爭議點或論點 (純文字陣列)。** **陣列中的字串不應包含如『爭議點：』等前綴文字或 Markdown 列表符號。**
      *   若無明顯爭議，**此欄位值必須設為 "null"**。
  *   **"result_status_next" (字串 或 字串陣列)**: **清晰且相對完整地說明**此議程項目在此次會議的**最終處理結果、審查進度或當前狀態。應包含必要的程序性資訊（如委員會審查結論、是否需黨團協商、二讀或三讀通過情況等），確保資訊完整。**
      *   **如果結果/狀態為單一、連貫的描述，則此欄位為一個包含該描述的字串 (純文字)。**
      *   **如果結果/狀態包含多個獨立的程序步驟或決議事項（例如：委員會審查完竣，決議需黨團協商；或 二讀表決通過，黨團提議續行三讀，三讀亦通過），則此欄位必須是一個字串陣列，每個字串代表一個獨立的步驟或決議 (純文字陣列)。** **陣列中的字串不應包含 Markdown 列表符號。**
*   所有字串內容都應遵循中立、客觀、精確、易懂的原則，**同時力求內容的詳盡與結構化，提供足夠的細節讓公民充分理解。**

**三、 語言與風格:**

*   語言清晰、精確、中立、客觀。
*   採用略為正式但公民易懂的書面語風格。
*   聚焦關鍵、實質資訊，過濾掉冗餘描述，**但應確保摘要的完整性與細節豐富度，以滿足前述對各欄位的詳細要求**。

**四、 輸出指令:**

*   **直接輸出一個完整、合法的 JSON 物件內容**，不要包含任何 JSON 區塊標記 (\`\`\`json ... \`\`\`) 之外的文字、註解、開頭問候語（如 "好的，這是一份..."）或結尾語。
*   如果原始文本內容**僅為簡單的程序宣告或無實質性討論**，請直接輸出以下 JSON 物件：
  \`\`\`json
  {
    "summary_title": "程序性內容",
    "overall_summary_sentence": "本次記錄主要為程序性內容，無實質討論摘要。",
    "agenda_items": []
  }
  \`\`\`

文本內容：
"""
${content}${truncatedMessage}
"""
`; // <--- Prompt 結束

  return prompt;
}

// --- 跳過分析的條件函數保持不變 ---
export function shouldSkipAnalysis(
  categoryCode: number | null | undefined
): boolean {
  // 跳過 6 (未知), 7 (索引), 9 (索引)
  return categoryCode === 6 || categoryCode === 7 || categoryCode === 9;
}
